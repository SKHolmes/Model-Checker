const Coins = 4.
const Locks = 2.
const W = 3.

processes {
    Simple = (takeTea -> STOP).

    Two = (teaButton -> takeTea -> STOP).

    CM = (teaButton -> takeTea -> STOP | coffeeButton -> takeCoffee -> STOP).

    VM = (coin -> (teaBtn -> tea -> STOP | coffeeBtn -> coffee -> STOP)).
    VM2 = (coin -> teaBtn -> coffee -> STOP | coin -> coffeeBtn -> coffee -> STOP).

    Basic = (a -> (t -> b -> STOP | c -> STOP)).
    Bas = Basic\{t}.
    B = abs(Bas).

    Tt = (takeTea -> Tt).

    BT = (teaButton -> takeTea -> BT).

    P = (a -> Q),
        Q = (b -> P | c -> Q).

    TrRed = (red -> TrRed | turnGreen -> TrGreen),
        TrGreen = (green -> TrGreen | turnRed -> TrRed).

    Parallel = ((a -> b -> c -> STOP) || (x -> y -> z -> STOP)).
    Parallel2 = ((a -> m -> c -> STOP) || (x -> m -> z -> STOP))\{m}.

    Buff = (in -> out -> Buff).
    B2 = (one:Buff || two:Buff).
    B3 = (one:Buff/{move/one.out} || two:Buff/{move/two.in}).
    B4 = B3\{move}.
    B5 = abs(B4).
    B6 = simp(B5).

    Money = C[1],
        C[i:1..Coins] = (when (i < Coins) coin -> C[i + 1] | when (i == Coins) coin -> C[1]).

    Lock = ([i:1..Locks].setLock -> L[i]),
        L[j:1..Locks] = ([i:1..Locks].enter -> (when (i == j) open -> close -> L[j] | when (i != j) error -> Lock)).

    Worker = (getTask -> doTask -> Worker).
    Workers = (forall [i:1..W] ([i]:Worker)).
    Farmer = F[1],
        F[i:1..W] = (when (i < W) [i].getTask -> F[i + 1] | when (i >= W) [i].getTask -> F[1]).
    Farm = (Farmer || Workers).
}
automata Simple, Two, CM, VM, VM2, Basic, Bas, B, Tt, BT, P.
automata TrRed.
automata Parallel, Parallel2.
automata Buff, B2, B3, B4, B5, B6.
automata Money, Lock.
automata Worker, Workers, Farmer, Farm.
