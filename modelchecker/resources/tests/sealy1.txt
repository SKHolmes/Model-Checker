processes {

One = a!->b?->STOP.  // a?->b!->   STOP
Two = a!->c?->STOP. //  a? -> b! -> NOT STOP

OOut = a!->b?->x!->STOP.  // a? -> b! -> x!
TOut = a!->c?->x!->STOP.  // a? -> b!  NOT x!
Test = a?->b!->STOP. 
OOtest = OOut||{a!,b!,c!} Test.
TOtest = TOut||{a!,b!,c!} Test.




}

//alphabet{a?,b?,c?, ab?,ac?}

operation {

One <q Two.
One <q{cong} Two.
OOtest <q TOtest.
OOtest <q{cong} TOtest.

} 









