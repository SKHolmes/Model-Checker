processes {

A = (a->b->STOP| a->c->STOP).
B = a->(b->STOP |c->STOP).

C  = (a->b->STOP| a->c->STOP | a->(b->STOP |c->STOP)).

A1 = (a->b->A1| a->c->STOP).
B1 = a->(b->B1 |c->STOP).
C1  = (a->b->C1| a->c->STOP | a->(b->C1 |c->STOP)).

D = (a->b->c->STOP |a->b->d->STOP).
E = a->(b->c->STOP | b->d->STOP).

 F = b->STOP| a->X,
    X = a->X|b->STOP.
 G = b->STOP| a->G.


}
automata A,B,C,D,E,A1,B1,C1, F,G.
operation {
 A !* B. 
 A # B.
 A * C.
 C !* B.
C # B.

 A1 !* B1. 
 A1 # B1.
 C1 # B1.
 C1 # A1.
 A1 * C1.
 C1 !* B1.

D !~ E.
D * E.
D # E.

F ~ G.
F !* G.  // adding a c->STOP from root and they are clearly distinct
F # G.

}


