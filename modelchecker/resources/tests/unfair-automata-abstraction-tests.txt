/* Unfair abstraction tests */

automata {
    Basic = (a -> B),
        B = (x -> B | c -> STOP)\{x}.
    
    UnfairBasicAbs = abs{unfair}(Basic).
    UnfairBasicExp = (a -> (c -> STOP | ERROR)).
    
    FairBasicAbs = abs{fair}(Basic).
    StndBasicAbs = abs(Basic).
    FairBasicExp = (a -> c -> STOP).
}

operation {
    UnfairBasicAbs ~ UnfairBasicExp.
    UnfairBasicAbs !~ FairBasicExp.
    FairBasicAbs ~ FairBasicExp.
    FairBasicAbs !~ UnfairBasicExp.
    StndBasicAbs ~ FairBasicExp.
    StndBasicAbs !~ UnfairBasicExp.
}

automata {
    Basic2 = (a -> B),
        B = (x -> y -> B | c -> STOP)\{x, y}.
    
    UnfairBasicAbs2 = abs{unfair}(Basic2).
    UnfairBasicExp2 = (a -> B | a -> B | a -> C),
        B = (c -> D | c -> D | ERROR),
        C = (c -> D | ERROR),
        D = (STOP).
    
    FairBasicAbs2 = abs{fair}(Basic2).
    StndBasicAbs2 = abs(Basic2).
    FairBasicExp2 = (a -> B | a -> B | a -> C),
        B = (c -> D | c -> D),
        C = (c -> D),
        D = (STOP).
}

operation {
    UnfairBasicAbs2 ~ UnfairBasicExp2.
    UnfairBasicAbs2 !~ FairBasicExp2.
    FairBasicAbs2 ~ FairBasicExp2.
    FairBasicAbs2 !~ UnfairBasicExp2.
    StndBasicAbs2 ~ FairBasicExp2.
    StndBasicAbs2 !~ UnfairBasicExp2.
}

automata {
    Loop = (a -> B | x -> Loop),
        B = (b -> Loop | x -> B)\{x}.
        
    UnfairLoopAbs = abs{unfair}(Loop).
    UnfairLoopExp = (a -> B | ERROR),
        B = (b -> UnfairLoopExp | ERROR).
        
    FairLoopAbs = abs{fair}(Loop).
    StndLoopAbs = abs(Loop).
    FairLoopExp = (a -> b -> FairLoopExp).
}

operation {
    UnfairLoopAbs ~ UnfairLoopExp.
    UnfairLoopAbs !~ FairLoopExp.
    FairLoopAbs ~ FairLoopExp.
    FairLoopAbs !~ UnfairLoopExp.
    StndLoopAbs ~ FairLoopExp.
    StndLoopAbs !~ UnfairLoopExp.
}

automata {
    Tau = (a -> Tau)\{a}.
    
    UnfairTauAbs = abs{unfair}(Tau).
    UnfairTauExp = (ERROR).
    
    FairTauAbs = abs{fair}(Tau).
    StndTauAbs = abs(Tau).
    FairTauExp = (STOP).
}

operation {
    UnfairTauAbs ~ UnfairTauExp.
    UnfairTauAbs !~ FairTauExp.
    FairTauAbs ~ FairTauExp.
    FairTauAbs !~ UnfairTauExp.
    StndTauAbs ~ FairTauExp.
    StndTauAbs !~ UnfairTauExp.
}

automata {
    Tau2 = (a -> b -> Tau2)\{a, b}.
    
    UnfairTauAbs2 = abs{unfair}(Tau2).
    UnfairTauExp2 = (ERROR).
    
    FairTauAbs2 = abs{fair}(Tau2).
    StndTauAbs2 = abs(Tau2).
    FairTauExp2 = (STOP).
}

operation {
    UnfairTauAbs2 ~ UnfairTauExp2.
    UnfairTauAbs2 !~ FairTauExp2.
    FairTauAbs2 ~ FairTauExp2.
    FairTauAbs2 !~ UnfairTauExp2.
    StndTauAbs2 ~ FairTauExp2.
    StndTauAbs2 !~ UnfairTauExp2.
}