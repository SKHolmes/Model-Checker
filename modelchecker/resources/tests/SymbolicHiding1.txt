const N = 2.
processes {
Im = C[0][0][0],
       C[i:0..N][j:0..N][k:0..N] = (when i< N coin -> C[i + 1][j][k] |
                            when j<N  bang -> C[0][j+1][k] |
                            when j==N xxx -> C[0][0][k] |
                            when k == 0 ping ->C[i][j][k+1]|
                            when k == 1 pong -> C[i][j][k-1]).
Atomic = simp(abs(Im)).

Imi = Im${i,k}.   // j expanded

New = abs(Imi\{coin}).  // abstract i,k symbolic
Next = New${}.          // then expand
Nn = simp(Next).

Hope = abs(Im\{coin}). //abstract expanded
Hh = simp(Hope).

Imj = Im${j,k}.   // i expanded
Newj = abs(Imj\{coin}).  // j k symbolic
Nextj = Newj${}.
//Nnj = simp(Nextj).

Imk = Im${j,i}.   // k expanded
Newk = abs(Imk\{coin}).  // j i symbolic
Nextk = Newk${}.
// Nnk = simp(Nextk).


X = Imi || Imj.  // i and y expanded - symbolic on k ?
Xm = X${}.

Ii = Imi${}.
Ij = Imj${}.
CIm = Ii || Ij.


}
automata Im, Atomic, Imi.

automata New, Next, Nn, Hope, Hh.

automata Imj,Newj,Nextj.

automata Imk, Newk, Nextk.

automata X,Xm.

automata Ii, Ij, CIm.

operation {
Ii ~ Im.
Ij~Im.
CIm ~ Im.
Xm ~ Im.
Hope ~ Next.
Next ~ Hope.
Nextj ~ Hope.
Nextk ~ Hope.
}

