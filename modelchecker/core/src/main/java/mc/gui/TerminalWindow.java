package mc.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.redpois0n.terminal.InputListener;
import com.redpois0n.terminal.JTerminal;
import lombok.Getter;
import mc.Main;

import javax.swing.*;
import java.awt.*;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;

public class TerminalWindow {

  @Getter
  private PrintWriter writer;
  @Getter
  private JTerminal terminal;
  private JPanel panel;
  @Getter
  private JProgressBar progressBar1;
  @Getter
  private JPanel progressPanel;
  @Getter
  JFrame frame;

  TerminalWindow(Main main) {
    frame = new JFrame();
    frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    frame.addKeyListener(terminal.getKeyListener());
    frame.add($$$getRootComponent$$$());
    frame.setSize(800, 600);
    frame.setVisible(true);
    frame.setTitle("Model Checker Server Process");
    listenToCommands(main);
  }

  /**
   * Listen to commands entered into the terminal and forward them to the command manager
   *
   * @param main the main instance
   */
  private void listenToCommands(Main main) {
    terminal.addInputListener(new InputListener() {
      @Override
      public void processCommand(JTerminal terminal, String cmd) {
        try {
          if (writer == null && main.getCommandManager() != null) {
            //Execute the command
            main.getCommandManager().executeCommand(cmd);
          } else {
            //Forward the command to the sub process.
            writer.println(cmd);
          }
        } catch (Exception ex) {
          ex.printStackTrace();
        }
      }

      @Override
      public void onTerminate(JTerminal terminal) {
        main.stop();
      }
    });
  }

  void wrapProcess(Process p) {
    writer = new PrintWriter(p.getOutputStream(), true);
    new Thread(() -> {
      try {
        while (p.isAlive()) {
          BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));

          String line;

          while ((line = reader.readLine()) != null) {
            terminal.append(line + "\n");
          }
        }
      } catch (Exception e) {
        e.printStackTrace();
      }
    }).start();
  }

  {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    panel = new JPanel();
    panel.setLayout(new BorderLayout(0, 0));
    panel.setBackground(new Color(-16777216));
    panel.setForeground(new Color(-16777216));
    panel.setName("null.contentPane");
    final JScrollPane scrollPane1 = new JScrollPane();
    scrollPane1.setForeground(new Color(-16777216));
    scrollPane1.setHorizontalScrollBarPolicy(31);
    scrollPane1.setVisible(true);
    panel.add(scrollPane1, BorderLayout.CENTER);
    scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null));
    terminal = new JTerminal();
    terminal.setContentType("text/plain");
    terminal.setFont(new Font("monospaced", terminal.getFont().getStyle(), 14));
    terminal.setForeground(new Color(-4473925));
    terminal.setMargin(new Insets(0, 0, 0, 0));
    terminal.setOpaque(true);
    terminal.setSelectionEnd(0);
    terminal.setSelectionStart(0);
    terminal.setText("");
    terminal.setVerifyInputWhenFocusTarget(true);
    terminal.setVisible(true);
    scrollPane1.setViewportView(terminal);
    progressPanel = new JPanel();
    progressPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
    progressPanel.setBackground(new Color(-16777216));
    progressPanel.setForeground(new Color(-4473925));
    progressPanel.setVisible(false);
    panel.add(progressPanel, BorderLayout.SOUTH);
    progressBar1 = new JProgressBar();
    progressPanel.add(progressBar1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    progressPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setForeground(new Color(-1));
    label1.setText("Downloading update");
    progressPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return panel;
  }
}
